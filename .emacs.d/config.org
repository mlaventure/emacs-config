#+STARTUP: showall indent

#+BEGIN_COMMENT
You can make words *bold*, /italic/, _underlined_, =verbatim= and
~code~, and, if you must, ‘+strike-through+’. Text in the code and
verbatim string is not processed for Org mode specific syntax, it is
exported verbatim.

=C-c C-l= will set up/modify a link

=C-c '= will open an emacs-lisp mode window to code and format what we
need, the same combination will also close that window
#+END_COMMENT

* Packages
This section has to be first, otherwise required packages won't be
able to be installed and loaded

- Who doesn't like a package manager? Noone, so always load it up.
  #+BEGIN_SRC emacs-lisp
    (require 'package)
  #+END_SRC
- Always load up MELPA
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives
                 '("melpa-stable" . "http://stable.melpa.org/packages/"))
  #+END_SRC
- We want to be able to setup those package early, so initialize them
  all
  #+BEGIN_SRC emacs-lisp
    (package-initialize)
  #+END_SRC
- Here we define a handy helper that will install a package if it's
  not yet present then require it
  #+BEGIN_SRC emacs-lisp
        (defun activate-package (pkg)
          "Install a package if it is not present then require it"
          (unless (package-installed-p pkg)
            (package-refresh-contents)
            (package-install pkg))
          (require pkg))
  #+END_SRC
- Let's try and make use of [[https://github.com/jwiegley/use-package][use-package]]. And set it to always install
  packages if they're not present.
  #+BEGIN_SRC emacs-lisp
    (activate-package 'use-package)
    (setq use-package-always-ensure t
          use-package-verbose t)
  #+END_SRC
- Use auto-compile to always get up-to-date compiled packages
  #+BEGIN_SRC emacs-lisp
    (use-package auto-compile
                 :init
                 (setq load-prefer-newer t)
                 :commands (auto-compile-on-load-mode)
                 :config
                 (setq auto-compile-display-buffer nil)
                 (setq auto-compile-mode-line-counter t)
                 (auto-compile-on-load-mode))

  #+END_SRC
* UI
This is setting up the UI as a like it, simple and clean. I also put
some tweak affecting navigation in this section (e.g. switching
between windows)
** Hide the minor modes
Since I know exactly what minor modes I have enabled, no need to
clutter my modeline with them. [[https://github.com/myrjola/diminish.el][Diminish]] is a mode that does just that.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :demand t
    :diminish visual-line-mode
    :diminish hs-minor-mode
    :diminish abbrev-mode
    :diminish auto-fill-function)
#+END_SRC
** Apparence
- We wanna hide most of the UI elements
  - menu bar
  - tool bar
  - scroll bar
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+END_SRC
- Highlight matching parenthesis and current line. For parenthesis we
  activate [[https://github.com/Fanael/rainbow-delimiters][raimbow-delimiters]], it gives us different colors per depth
  #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
    (use-package rainbow-delimiters)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

    (global-hl-line-mode t)
  #+END_SRC
- Show current column number in the mode line
  #+BEGIN_SRC emacs-lisp
    (column-number-mode t)
  #+END_SRC
- Enable visual-line mode so long lines are readable without the need
  for horizontal scrolling.
  #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode)
  #+END_SRC
- Use icons from [[https://github.com/domtronn/all-the-icons.el][all-the-icons]], who doesn't like icons?
  TODO: need to figure out how to automatically install the icons via
  ~all-the-icons-install-fonts~ on first start
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :config
      (unless (file-exists-p "~/.local/share/fonts/all-the-icons.ttf")
        (all-the-icons-install-fonts t))
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
  #+END_SRC
- Use [[https://github.com/purcell/default-text-scale][default-text-scale]] to update all the frame front at a time. It's bound
  to ~C-M-=~ and ~C-M--~ by default.
  #+BEGIN_SRC emacs-lisp
    (use-package default-text-scale
      :demand t
      :config
      (default-text-scale-mode))
  #+END_SRC
- Don't show the startup screen
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
  #+END_SRC
- Always show line numbers (use the newer display-line-numbers-mode if
  available)
  #+BEGIN_SRC emacs-lisp
    (if (version<= "26.0.50" emacs-version)
        (global-display-line-numbers-mode t)
      (use-package nlinum
        :ensure t
        :init
        (global-nlinum-mode t)))
  #+END_SRC
** Navigation
- Activate Camel Case navigation
  #+BEGIN_SRC emacs-lisp
    (global-subword-mode t)
    (diminish 'subword-mode)
  #+END_SRC
- Move from window to window with Shift key
  #+BEGIN_SRC emacs-lisp
    (windmove-default-keybindings)
    (setq windmove-wrap-around t)
    ;; Make windmove work in org-mode:
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right)
  #+END_SRC
- Swap buffer around with C-Shift-<key>
  #+BEGIN_SRC emacs-lisp
    (use-package buffer-move
      :bind (("C-S-<up>" . buf-move-up)
             ("C-S-<down>" . buf-move-down)
             ("C-S-<left>" . buf-move-left)
             ("C-S-<right>" . buf-move-right)))
  #+END_SRC
- [[https://www.emacswiki.org/emacs/WinnerMode][Winner mode]] allow us to jump between window configuration using =C-c
  <left>= and =C-c <right>=. Very useful when wanting to see one
  buffer with more space then be back to comparison for instance
    #+BEGIN_SRC emacs-lisp
      (when (fboundp 'winner-mode)
        (winner-mode 1))
    #+END_SRC
- Teach emacs to accept =y= and =n= for =yes= and =no=.
  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
- Set =F8= as a toggle for neotree to have a nice file explorer in
  buffer.
  #+BEGIN_SRC emacs-lisp
    ;;(use-package neotree
    ;;  :after all-the-icons
    ;;  :commands (neotree-toggle)
    ;;  :bind ("<f8>" . neotree-toggle))
  #+END_SRC
- Use TreeMacs for side bar instead of neotree above?
  (https://github.com/Alexander-Miller/treemacs)
  #+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                 (if (treemacs--find-python3) 3 0)
              treemacs-deferred-git-apply-delay      0.5
              treemacs-display-in-side-window        t
              treemacs-eldoc-display                 t
              treemacs-file-event-delay              5000
              treemacs-file-follow-delay             0.2
              treemacs-follow-after-init             t
              treemacs-git-command-pipe              ""
              treemacs-goto-tag-strategy             'refetch-index
              treemacs-indentation                   2
              treemacs-indentation-string            " "
              treemacs-is-never-other-window         nil
              treemacs-max-git-entries               5000
              treemacs-missing-project-action        'ask
              treemacs-no-png-images                 nil
              treemacs-no-delete-other-windows       t
              treemacs-project-follow-cleanup        nil
              treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-recenter-distance             0.1
              treemacs-recenter-after-file-follow    nil
              treemacs-recenter-after-tag-follow     nil
              treemacs-recenter-after-project-jump   'always
              treemacs-recenter-after-project-expand 'on-distance
              treemacs-show-cursor                   nil
              treemacs-show-hidden-files             t
              treemacs-silent-filewatch              nil
              treemacs-silent-refresh                nil
              treemacs-sorting                       'alphabetic-desc
              treemacs-space-between-root-nodes      t
              treemacs-tag-follow-cleanup            t
              treemacs-tag-follow-delay              1.5
              treemacs-width                         35)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;; (treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode t)
        (pcase (cons (not (null (executable-find "git")))
                     (not (null (treemacs--find-python3))))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("<f8>"      . treemacs)
            ("C-x t t"   . treemacs)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

    ;; (use-package treemacs-evil
    ;;   :after treemacs evil
    ;;   :ensure t)

    (use-package treemacs-projectile
      :after treemacs projectile
      :ensure t)

    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))

    (use-package treemacs-magit
      :after treemacs magit
      :ensure t)
  #+END_SRC
- Centaur-tabs for a more modern look
  (https://github.com/ema2159/centaur-tabs)
  #+BEGIN_SRC emacs-lisp
    (use-package centaur-tabs
      :after helm
      :ensure t
      :defer t
      :config
      (setq centaur-tabs-style "bar")
      (setq centaur-tabs-height 32)
      (setq centaur-tabs-set-icons t)
      (setq centaur-tabs-set-bar 'over)
      (setq centaur-tabs-set-modified-marker t)
      (centaur-tabs-headline-match)
      (centaur-tabs-group-by-projectile-project)
      (centaur-tabs-mode t)
      :bind
      ("C-<prior>"  . centaur-tabs-backward)
      ("C-<next>"   . centaur-tabs-forward)
      ("C-c t"      . centaur-tabs-toggle-groups))
  #+END_SRC
- Semantic clashes with centaur-tabs, so make it a toggle
  #+BEGIN_SRC emacs-lisp
    (use-package stickyfunc-enhance
      :after semantic
      :ensure t
      :defer t
      :bind ("<f6>" . semantic-stickyfunc-mode))
  #+END_SRC
- Use [[https://github.com/justbur/emacs-which-key][which-key]] to help us figure out what we can do next
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :demand t
    :diminish which-key-mode
    :init
    (setq which-key-sort-order 'which-key-key-order-alpha)
    :bind* (("M-m ?" . which-key-show-top-level))
    :config
    (which-key-mode)
    (which-key-add-key-based-replacements
      "M-m ?" "top level bindings"))
#+END_SRC
- Unbind =C-z=, I don't want my GUI emacs to disappear on me
  #+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-z"))
  #+END_SRC
- Enable [[https://github.com/Fuco1/smartparens][smartparens]] to automatically have our pairs matched for us
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens-config
      :ensure smartparens
      :diminish smartparens-mode
      :config
      (progn
        (show-smartparens-global-mode t)))
    (add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
  #+END_SRC
- Highlight current word with [[https://github.com/fgeller/highlight-thing.el][highlight-thing]]
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-thing
      :demand t
      :config
      (setq highlight-thing-exclude-thing-under-point t)
      (add-hook 'c-mode-hook    'highlight-thing-mode)
      (add-hook 'sh-mode-hook   'highlight-thing-mode)
      (add-hook 'go-mode-hook   'highlight-thing-mode)
      (add-hook 'python-mode-hook   'highlight-thing-mode))
  #+END_SRC
** Mode-line customization
- Better unique filename. We want to see =file|file= and =file|titi=
  when opening =/toto/file= and =/titi/file= instead of =file<x>=.
  #+BEGIN_SRC emacs-lisp
    (use-package uniquify
      :ensure nil ;; this is a builtin package
      :config
      (setq uniquify-buffer-name-style 'post-forward))
  #+END_SRC
- Show how much battery we have left
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :demand t)
#+END_SRC
** Prettier mode-line
We use [[https://github.com/TheBB/spaceline][spaceline]] & [[https://github.com/domtronn/spaceline-all-the-icons.el][spaceline-all-the-icons]] with the cyan [[https://github.com/kuanyui/moe-theme.el][moe-theme]] for our mode-line.
#+BEGIN_SRC emacs-lisp
  (use-package spaceline-config
    :ensure spaceline
    :config
    (use-package moe-theme
      :commands (powerline-moe-theme moe-theme-set-color))
    (powerline-moe-theme)
    (moe-theme-set-color 'cyan)
    (spaceline-emacs-theme))

  (use-package spaceline
    :ensure t
    :pin melpa-stable)

  (use-package spaceline-all-the-icons
    :after spaceline
    :pin melpa-stable
    :config
    (setq spaceline-all-the-icons-eyebrowse-display-name  nil
          spaceline-all-the-icons-hide-long-buffer-path   t
          spaceline-all-the-icons-separator-type          'arrow)
    (spaceline-all-the-icons--setup-neotree)
    (spaceline-toggle-all-the-icons-projectile-on)
    (spaceline-all-the-icons-theme))
#+END_SRC
** Highlight or Fix some common mistakes
- Trailing whitespaces
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
  #+END_SRC
- 80 columns rule using [[https://www.emacswiki.org/emacs/FillColumnIndicator][fill-column-indicator]]. We only want it in
  actual files, not special buffers.
  #+BEGIN_SRC emacs-lisp
    (use-package fill-column-indicator
      :commands (fci-mode)
      :init
      (setq fci-rule-width          3
            fci-rule-column         79
            fci-rule-use-dashes     t
            fci-rule-color          "plum")
      (define-globalized-minor-mode global-fci-mode
        fci-mode (lambda ()
                   (if buffer-file-name (fci-mode 1) (fci-mode 0))))
      (global-fci-mode 1))
  #+END_SRC
- At 100 columns, use [[https://github.com/jordonbiondo/column-enforce-mode][column-enforce-mode]] instead. We set the color of
  faulty characters to "violet red"
  #+BEGIN_SRC emacs-lisp
    (use-package column-enforce-mode
      :commands (column-enforce-mode)
      :diminish column-enforce-mode
      :config
      (setq column-enforce-column 100)
      (custom-set-faces
            `(column-enforce-face ((t (:inherit font-lock-warning-face :underline t :foreground "violet red"))))))
  #+END_SRC
- Always add a newline at end of files, and default tab to 4 spaces
  #+BEGIN_SRC emacs-lisp
    (setq mode-require-final-newline t
          tab-width 4)
  #+END_SRC
** I like my theme dark
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t (:inherit nil
                           :stipple nil
                           :background "#2e3436"
                           :foreground "#eeeeec"
                           :inverse-video nil
                           :box nil
                           :strike-through nil
                           :overline nil
                           :underline nil
                           :slant normal
                           :weight normal
                           :height 90
                           :width normal
                           :foundry "unknown"
                           :family "DejaVu Sans Mono"))))
   '(hl-line ((t (:background "steel blue"))))
   '(idle-highlight ((t (:inherit region :background "tomato")))))

  ;; (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
  ;; (use-package nord-theme)
  ;; (use-package badger-theme)
  ;; (load-theme 'icy-hex-gui t)
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
  ;;(set-frame-parameter (selected-frame) 'alpha <both>)
  (set-frame-parameter (selected-frame) 'alpha 85)
  (add-to-list 'default-frame-alist '(alpha . 85))
#+END_SRC
* Encoding System
UTF-8 for all the things!
#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-auto-unix)
#+END_SRC
* Backup
By default emacs backups edited buffer in their current
directory. Having a bunch of =~= files everywhere in my filesystem is
highly annoying, so let's put them somewhere else.
#+BEGIN_SRC emacs-lisp
  (let ((backups-dir (expand-file-name "backups" user-emacs-directory)))
    (setq backup-by-copying t                             ;; Copy the file, don't rename it
          backup-directory-alist `((".*" . ,backups-dir)) ;; Put them in ~/.emacs.backups
          delete-old-versions t                           ;; Delete old version
          kept-old-versions 3                             ;; Keep the 3 oldest version
          kept-new-versions 3                             ;; and the 3 newest one (including the one being made)
          version-control t))                             ;; Use numbered file name
#+END_SRC
* Undo Tree
[[https://www.emacswiki.org/emacs/UndoTree][undo-tree]] provide a visual tree of the undo that we have made.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :bind (("<f7>" . undo-tree-visualize))
    :config
    (setq undo-tree-auto-save-history t)
    (let ((undo-dir (expand-file-name "undo" user-emacs-directory)))
      (setq undo-tree-history-directory-alist `((".*" . ,undo-dir))))
    (global-undo-tree-mode))
#+END_SRC
* Helm
Helm make it easy to filter stuff :). I used [[http://tuhdo.github.io/helm-intro.html][this tutorial]] as an
inspiration for most of the following configuration.
We bind the following global keys:
  - =C-c h= :: is made the helm prefix, which-key will show possible
               match if we ever forget what to do next
  - =M-x= :: helm-M-x, same but better
  - =M-y= :: helm-show-kill-ring, allows to have a visual view of the
             kill ring
  - =C-x b= :: helm-mini, allows switch buffer using helm powerful
               matching
  - =C-x C-f= :: helm-find-files, find-file but better ;-).
  - =C-s= :: helm-occur, allows quickly finding occurrences of
             pattern in current buffer
In helm mode, we define the following to bindings:
  - =<TAB>= :: helm-execute-persistent-action, will usually show the
               current match content or if in something like =M-x= the
               associated help
  - =C-z= :: helm-select-action, will show available action from the
             current helm status
We let helm auto-resize from =30%= to =70%= of the frame is
affecting. We also set it to use the current frame instead of opening
a whole window for itself.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :demand t
    :bind (("M-x"         . helm-M-x)
           ("M-y"         . helm-show-kill-ring)
           ("C-x b"       . helm-mini)
           ("C-x C-f"     . helm-find-files)
           ("C-s"         . helm-occur)
           ("C-c h"       . helm-command-prefix)
           ("C-x c"       . nil)
           :map helm-map
           ("<tab>"       . helm-execute-persistent-action)
           ("C-z"         . helm-select-action))
    :config
    (require 'helm-config)
    (helm-mode t)
    (setq helm-autoresize-max-height 50
          helm-autoresize-min-height 30
          helm-split-window-in-side-p t)
    (setq helm-M-x-fuzzy-match t
          helm-ff-fuzzy-matching t
          helm-mini t
          helm-apropos-fuzzy-match t)
    (setq helm-source-names-using-follow '("Occur")
          helm-follow-mode-persistent t)
    (use-package helm-fuzzier
      :config
      (use-package flx)
      (use-package helm-flx
        :after flx
        :config (helm-flx-mode +1))
      (helm-fuzzier-mode +1))
    (helm-autoresize-mode t))
#+END_SRC
* Flyspell
Let's have some warning when we type things wrong
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode
    :ensure nil
    :config
    (add-hook 'flyspell-mode-hook 'flyspell-buffer)
    (setq flyspell-issue-message-flag nil)
    (dolist (hook '(text-mode-hook org-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
      (add-hook hook (lambda () (flyspell-mode -1)))))
#+END_SRC
* Flycheck
We want to check for linter errors as we go (see [[https://github.com/flycheck/flycheck][here]] for
documentation)
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :init (global-flycheck-mode)
    :config
    (setq flycheck-check-syntax-automatically '(save)))
#+END_SRC
* Company
We use the [[http://company-mode.github.io/][company-mode]] completion framework
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :config
    (setq company-idle-delay .1
          company-tooltip-align-annotations t
          company-echo-delay 0)
    (custom-set-faces
     `(company-scrollbar-bg       ((t (:background "lightgray"))))
     `(company-scrollbar-fg       ((t (:background "darkgrey"))))
     '(company-preview            ((t (:foreground "darkgray" :underline t))))
     '(company-preview-common     ((t (:inherit company-preview))))
     '(company-tooltip            ((t (:background "lightgray" :foreground "black"))))
     '(company-tooltip-selection  ((t (:background "steelblue" :foreground "white"))))
     '(company-tooltip-common     ((((type x)) (:inherit company-tooltip :weight bold))
                                   (t (:inherit company-tooltip))))
     '(company-tooltip-common-selection
       ((((type x)) (:inherit company-tooltip-selection :weight bold))
        (t (:inherit company-tooltip-selection))))))
#+END_SRC
* Golang
  - Install go-mode and set it up to use =goimports= to format our
    files. go-mode depends on the following tools:
    - [[github.com/rogpeppe/godef][godef]]
    - [[golang.org/x/tools/cmd/goimports][goimports]]
    - [[golang.org/x/tools/cmd/godoc][godoc]]
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :commands (gofmt-before-save)
        :bind (:map go-mode-map
                    ("C-c C-c"        . comment-region)
                    ("C-u C-c C-c"    . uncomment-region)
                    ("M-."            . godef-jump))
        :config
        (setq gofmt-command "goimports")
        (add-hook 'go-mode-hook       'column-enforce-mode)
        (add-hook 'go-mode-hook       (lambda()
                                        (add-to-list 'flycheck-disabled-checkers 'go-megacheck)
                                        (setq flycheck-gometalinter-disable-linters '("megacheck"))
                                        (flyspell-prog-mode)))
        (add-hook 'go-mode-hook       'highlight-thing-mode)
        (add-hook 'go-mode-hook (lambda ()
                                  (add-hook 'before-save-hook 'gofmt-before-save nil 'local)
                                  (set (make-local-variable 'company-backends) '(company-go))
                                  (company-mode))))
    #+END_SRC
  - Use [[https://github.com/golangci/golangci-lint][golangci-lint]] with flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-golangci-lint
        :ensure t
        :hook (go-mode . flycheck-golangci-lint-setup))
    #+END_SRC
  - Install [[https://github.com/syohex/emacs-go-eldoc][go-eldoc]] to see variable, return value and function
    argument in the echo area. It depends on [[github.com/nsf/gocode][gocode]].
    #+BEGIN_SRC emacs-lisp
      (use-package go-eldoc
        :after go-mode
        :diminish eldoc-mode
        :config
        (add-hook 'go-mode-hook 'go-eldoc-setup))
    #+END_SRC
  - Activate completion with [[https://github.com/nsf/gocode/tree/master/emacs-company][company-go]]
    #+BEGIN_SRC emacs-lisp
      (use-package company-go
        :after company go-mode
        :ensure t
        :bind (:map go-mode-map
               ("<backtab>" . company-complete))
        :config
        (setq company-idle-delay .1
              company-tooltip-align-annotations t
              company-echo-delay 0)
        (custom-set-faces
         `(company-scrollbar-bg       ((t (:background "lightgray"))))
         `(company-scrollbar-fg       ((t (:background "darkgrey"))))
         '(company-preview            ((t (:foreground "darkgray" :underline t))))
         '(company-preview-common     ((t (:inherit company-preview))))
         '(company-tooltip            ((t (:background "lightgray" :foreground "black"))))
         '(company-tooltip-selection  ((t (:background "steelblue" :foreground "white"))))
         '(company-tooltip-common     ((((type x)) (:inherit company-tooltip :weight bold))
                                       (t (:inherit company-tooltip))))
         '(company-tooltip-common-selection
           ((((type x)) (:inherit company-tooltip-selection :weight bold))
            (t (:inherit company-tooltip-selection))))))
    #+END_SRC
  - Use go-guru, it depends on the [[https://godoc.org/golang.org/x/tools/cmd/guru][guru]] tool.
    #+BEGIN_SRC emacs-lisp
      (use-package go-guru
        :after go-mode
        :commands (go-guru-hl-identifier-mode)
        :bind (:map go-mode-map
                    ("C-c g" . go-guru-map))
        :config
        (add-hook 'go-mode-hook 'go-guru-hl-identifier-mode))
    #+END_SRC
  - Make use of [[https://github.com/emacsmirror/godoctor][godoctor.el]], it depends on the [[http://gorefactor.org/][godocotor]] utility
    #+BEGIN_SRC emacs-lisp
      (use-package godoctor
        :bind (:map go-mode-map
               ("C-c d r" . godoctor-rename)
               ("C-c d e" . godoctor-extract)
               ("C-c d t" . godoctor-toggle)
               ("C-c d g" . godoctor-godoc)))
    #+END_SRC
  - [[https://github.com/grafov/go-playground][go-playground]] gives us a convenient quick way to use local playground
    #+BEGIN_SRC emacs-lisp
      (use-package go-playground)
    #+END_SRC
* Python
Use anaconda-mode for completion and stuff
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC
Use pyenv
#+BEGIN_SRC emacs-lisp
  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))

  (use-package pyenv-mode
    :after projectil
    :config
    (add-hook 'python-mode-hook 'pyenv-mode)
    (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set))
#+END_SRC
use pipenv virtualenv
#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
#+END_SRC
Use company-mode for anaconda-mode
#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :after company
    :ensure t
    :bind (:map python-mode-map
                ("C-<tab>" . company-complete))
    :init
    (add-to-list 'company-backends 'company-anaconda)
    (add-hook 'python-mode-hook 'company-mode))
#+END_SRC
Misc
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :bind (:map python-mode-map
                ("C-c C-c"        . comment-region)
                ("C-u C-c C-c"    . uncomment-region)
                ("C-<tab>" . company-complete))
    :config
    (add-to-list 'company-backends 'company-anaconda)
    (add-hook 'python-mode-hook 'company-mode))
#+END_SRC
* Rust
Our Rust env. It depends on the following binaries:
  - rust toolchain (https://www.rust-lang.org/tools/install)
  - racer (https://github.com/racer-rust/emacs-racer#installation)
  - rustlib sources (`rustup component add rust-src)
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :bind (:map rust-mode-map
                ("C-c C-c"        . comment-region)
                ("C-u C-c C-c"    . uncomment-region))
    :config
    (setq rust-format-on-save t)
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode)))
  (use-package flycheck-rust
    :after flycheck
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
  (use-package racer
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode)
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t))
#+END_SRC
* Direnv
I make use of several different GOPATH, this makes use of the [[https://direnv.net/][direnv]]
tool to automatically update the environment of the current buffer
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC
* Git
- Let's use [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]] to keep track of changes in our buffer
  #+BEGIN_SRC emacs-lisp
    (if (display-graphic-p)
        (use-package git-gutter-fringe
          :diminish git-gutter-mode
          :init
          (global-git-gutter-mode t)
          :config
          (setq git-gutter-fr:side 'right-fringe)
          (custom-set-variables
           '(git-gutter:update-interval 2))))
  #+END_SRC
* C / C++
It always go back to C eventually ;-)
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :config
    (semantic-mode 1)
    ;;(global-semantic-stickyfunc-mode 1)
    (use-package ede
      :config
      (global-ede-mode)))
#+END_SRC
Set a sane default indentation scheme
#+BEGIN_SRC emacs-lisp
  (defun my-c-style-mode-hook ()
    (setq c-default-style "linux"
          c-basic-offset 4
          tab-width 4))
  (add-hook 'c++-mode-hook 'my-c-style-mode-hook)
  (add-hook 'c-mode-hook 'my-c-style-mode-hook)
#+END_SRC
* DockerFile
Just want them to be colorized, [[https://github.com/spotify/dockerfile-mode/blob/master/dockerfile-mode.el][dockerfile-mode]] also allows to build
directly from emacs though.
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
* TOML
Let's get some color in those toml file
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
    :config
    ;; \\ indicates end of string i.e. a simpe '\'
    (add-to-list 'auto-mode-alist '("MAINTAINERS\\'" . toml-mode)))
#+END_SRC
* Protobuf
Let's get some color in those protobuf file
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode)
#+END_SRC
* YAML
Let's get some color in those yaml file
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
* Markdown
Let's get some color in those markdown file
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
* Misc
- When backward deleting don't push the word in the kill-ring
  #+BEGIN_SRC emacs-lisp
    (defun mlaventure/delete-word (arg)
      "Delete characters forward until encountering the end of a word.
    With argument, do this that many times.
    This command does not push text to `kill-ring'."
      (interactive "p")
      (delete-region
       (point)
       (progn
         (forward-word arg)
         (point))))

    (defun mlaventure/backward-delete-word (arg)
      "Delete characters backward until encountering the beginning of a word.
    With argument, do this that many times.
    This command does not push text to `kill-ring'."
      (interactive "p")
      (mlaventure/delete-word (- arg)))

    (global-set-key (kbd "<M-backspace>") 'mlaventure/backward-delete-word)
  #+END_SRC
- Default to indenting with spaces and 4 spaces per tab
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil
                  c-basic-offset 4
                  tab-width 4)
  #+END_SRC
- Set fill-column to 78, the default (70) is too aggressive.
  #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 78)
  #+END_SRC
- Speed up vertical scrolling
  #+BEGIN_SRC emacs-lisp
    (setq auto-window-vscroll nil)
  #+END_SRC
- Delete trailing whitespace on save
  #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC
* Emacs server
Always have an emacs server running
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC
* Projectile
Let's try and us [[http://batsov.com/projectile/][Projectile]] to handle our projects. We enable project caching
by default. [C-c p i] will invalidate it.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after helm
    :config
    (use-package helm-projectile
      :demand t)
    (setq projectile-completion-system    'helm
          projectile-indexing-method      'alien
          projectile-enable-caching       t)
    (setq projectile-globally-ignored-directories
          (append '("vendor" "*os/output")  projectile-globally-ignored-directories))
    (projectile-mode)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (helm-projectile-on))
#+END_SRC
* Large File
When opening large file, switch to [[https://github.com/m00natic/vlfi][VLF]] mode to avoid emacs killing the cpu
(it'll take more memory instead)
#+BEGIN_SRC emacs-lisp
  (use-package vlf
    :ensure t
    :config
    (require 'vlf-setup))
#+END_SRC
* BitBake
Use at work
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("onpa" . "https://olanilsson.bitbucket.io/packages/"))
  (use-package bitbake-modes)
#+END_SRC
